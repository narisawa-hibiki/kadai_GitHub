========================================
【クラス名】ASerialPacket
【概要】ASerial通信で使用するパケット生成／解析クラス。
         デバイス・コントローラ両モードに対応し、双方向通信とエラー処理を担う。
========================================

[定数]
- ASERIAL_VER               : バージョン識別子 (100)
- MODE_DEVICE               : デバイスモード (0)
- MODE_CONTROLLER           : コントローラモード (1)
- RESERVED_COMMAND_RESET    : リセット要求コマンド (0x00)
- RESERVED_COMMAND_GET_INFO : 情報取得コマンド (0x01)
- DATA_NUM_MAX              : データ最大数 (32)
- AD_FLAG                   : 加算フラグ (0xAD)
- DO_FLAG                   : スタートフラグ (0xD0)

[コンストラクタ]
- ASerialPacket(uint8_t device_id, uint8_t device_ver)
    → デバイス側として初期化

- ASerialPacket(uint8_t target_device_id)
    → コントローラとして初期化

[基本関数]
- int GetMode()
    → 動作モードを取得（MODE_DEVICE / MODE_CONTROLLER）

- uint8_t GetID()
    → 現在モードに応じたIDを返す（device_id / target_device_id）

- uint8_t GetVer()
    → デバイスモード時のバージョンを返す（コントローラモードでは0）

- bool GetConnectionState()
    → 接続状態を取得（コントローラモードのみ有効）

- void SetConnectionState(bool state)
    → 接続状態を設定

- uint16_t GetLastErrorCode()
    → 最後に発生したエラーコードを取得（ErrorCodeList に準拠）

- size_t GetNeedPacketBufSize(uint8_t* data_array, int data_num)
    → 与えられたデータからパケットサイズを算出（フラグ含む）

[パケット生成関数](protected)
- int MakePacketData(uint8_t* to_device_data, int data_num, uint8_t command, uint8_t* data_packet_out)
    → コントローラ→デバイス用パケット生成（モードと接続状態によるバリデーションあり）

- int MakePacketData(uint8_t* to_controller_data, int data_num, uint8_t* data_packet_out)
    → デバイス→コントローラ用パケット生成

※加算フラグやスタートフラグが含まれる場合、CheckDataNeedAddFlag() によってエスケープ挿入処理が行われる。

[パケット解析関数](protected)
- int ReadPacketData(uint8_t indata, ASerialDataStruct::ASerialData* data_buf_pt)
    → パケットの逐次読み込みと解析を行う。ステップ分岐処理やチェックサム検証を含む。
      1バイトずつ受信したデータを入れると、パケットの解析を行う。
      data_buf_pt には読み取り完了時に解析結果が格納される。

  戻り値:
    -1 : エラー発生／破棄
     0 : 継続読込(パケットの読み取り中)
     1 : 正常完了（パケット読み取り完了）

[内部処理関数](private)
- void ResetFlags()
    → 読込フラグ・エラーフラグの初期化

- void ResetDataArray()
    → 現在モードに応じた受信用データ配列を初期化（0クリア）

- int CheckDataNeedAddFlag(uint8_t data, uint8_t* data_array, int* index)
    → AD_FLAG / DO_FLAG を含むデータにエスケープ処理を施す  
       → AD_FLAG 挿入 → 加算対象データ - 1 を格納

[関連構造体]
- ASerialData
    → パケット解析結果の格納先

    struct ASerialData {
        uint8_t command;
        int data_num;
        uint8_t data[DATA_NUM_MAX];
    };

[主なエラーコード]
- WARNING_READ_SKIP       (0x0010)   : パケット読み飛ばし警告
- ERR_ADDFLAG_CASCADE     (0x0020)   : フラグの二重挿入（AD_FLAG）
- ERR_DEVICE_ID_MISMATCH  (0x0021)   : ターゲットIDとデバイスIDの不一致
- ERR_DATA_COUNT_INFO_OVER(0x0022)   : データ数が最大値を超過
- ERR_CHECK_DATA_MISMATCH (0x0023)   : チェックサム不一致

[注意事項]
- コントローラモード時の MakePacketData() は接続状態が false の場合一部コマンド以外エラー
- デバイス情報リクエスト(0x01)と、リセットコマンド(0x00)は device_id に関係なく処理される